#!/bin/bash

# Script simple pour tester les pages du frontend Trading ETF
# V√©rifie si les pages r√©pondent et si le HTML de base est pr√©sent

FRONTEND_URL="http://localhost:3000"
BACKEND_URL="http://localhost:8443"

echo "üöÄ Test des pages frontend Trading ETF"
echo "======================================="
echo ""

# Array des pages √† tester
declare -a pages=(
    "/:Dashboard/Home"
    "/etfs:ETF List"
    "/signals:Signals"
    "/portfolio:Portfolio"
    "/alerts:Alerts"
    "/settings:Settings"
    "/login:Login"
)

echo "üì° Test de connectivit√©..."
echo "Frontend URL: $FRONTEND_URL"
echo "Backend URL: $BACKEND_URL"
echo ""

# Test connectivit√© backend
if curl -s -f "$BACKEND_URL/health" > /dev/null; then
    echo "‚úÖ Backend accessible"
else
    echo "‚ùå Backend non accessible"
fi

# Test connectivit√© frontend
if curl -s -f "$FRONTEND_URL" > /dev/null; then
    echo "‚úÖ Frontend accessible"
else
    echo "‚ùå Frontend non accessible"
    exit 1
fi

echo ""
echo "üìÑ Test des pages individuelles..."
echo ""

success_count=0
total_count=${#pages[@]}

for page_info in "${pages[@]}"; do
    IFS=':' read -r path name <<< "$page_info"
    url="${FRONTEND_URL}${path}"
    
    echo "Testing: $name ($path)"
    
    # Faire la requ√™te
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" "$url")
    http_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    body=$(echo "$response" | sed '/HTTPSTATUS:/d')
    
    # V√©rifications
    has_html_tag=$(echo "$body" | grep -q "<html" && echo "‚úÖ" || echo "‚ùå")
    has_react_root=$(echo "$body" | grep -q 'id="root"' && echo "‚úÖ" || echo "‚ùå")
    has_bundle_js=$(echo "$body" | grep -q "bundle.js" && echo "‚úÖ" || echo "‚ùå")
    has_title=$(echo "$body" | grep -q "<title>" && echo "‚úÖ" || echo "‚ùå")
    
    echo "  HTTP Status: $http_code"
    echo "  HTML structure: $has_html_tag"
    echo "  React root div: $has_react_root"
    echo "  Bundle JS: $has_bundle_js"
    echo "  Title tag: $has_title"
    
    # V√©rifier s'il y a des erreurs √©videntes dans le HTML
    if echo "$body" | grep -q "Cannot GET"; then
        echo "  ‚ùå Erreur: Route non trouv√©e"
    elif echo "$body" | grep -q "Error"; then
        echo "  ‚ö†Ô∏è  Possible erreur d√©tect√©e"
    else
        echo "  ‚úÖ Pas d'erreurs √©videntes"
    fi
    
    # Compter comme succ√®s si HTTP 200 et structure HTML pr√©sente
    if [[ "$http_code" == "200" ]] && [[ "$has_html_tag" == "‚úÖ" ]] && [[ "$has_react_root" == "‚úÖ" ]]; then
        ((success_count++))
        echo "  üéâ SUCC√àS"
    else
        echo "  üí• √âCHEC"
    fi
    
    echo ""
done

echo "üìä R√âSULTATS FINAUX"
echo "==================="
echo "Pages test√©es: $total_count"
echo "Pages fonctionnelles: $success_count"
echo "Taux de succ√®s: $(( (success_count * 100) / total_count ))%"
echo ""

# Test des endpoints backend critiques
echo "üîß Test des endpoints backend critiques..."
echo ""

# Cr√©er un utilisateur test et r√©cup√©rer un token
echo "Cr√©ation utilisateur test..."
test_email="testpage@example.com"
test_password="testpass123"

# Register user (ignorer si existe d√©j√†)
curl -s -X POST "$BACKEND_URL/api/v1/auth/register" \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$test_email\",\"password\":\"$test_password\",\"full_name\":\"Test User\"}" > /dev/null 2>&1

# Login to get token
login_response=$(curl -s -X POST "$BACKEND_URL/api/v1/auth/login" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "username=$test_email&password=$test_password")

if echo "$login_response" | grep -q "access_token"; then
    token=$(echo "$login_response" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
    echo "‚úÖ Authentification r√©ussie"
    
    # Test des endpoints utilis√©s par le frontend
    declare -a endpoints=(
        "/api/v1/market/etfs:ETFs List"
        "/api/v1/market/dashboard-stats:Dashboard Stats"
        "/api/v1/market/real-etfs:Real ETFs"
        "/api/v1/signals/active:Active Signals"
        "/api/v1/portfolio/positions:Portfolio Positions"
        "/api/v1/alerts/:Alerts"
        "/api/v1/user/profile:User Profile"
    )
    
    for endpoint_info in "${endpoints[@]}"; do
        IFS=':' read -r endpoint description <<< "$endpoint_info"
        
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -H "Authorization: Bearer $token" \
          "$BACKEND_URL$endpoint")
        
        http_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
        
        if [[ "$http_code" == "200" ]]; then
            echo "‚úÖ $description ($endpoint)"
        else
            echo "‚ùå $description ($endpoint) - Status: $http_code"
        fi
    done
else
    echo "‚ùå √âchec de l'authentification"
fi

echo ""
echo "üèÅ Test termin√©!"