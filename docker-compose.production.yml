# Docker Compose sécurisé pour la production - Trading ETF
services:
  # Base de données PostgreSQL avec TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_etf_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:5432:5432"  # Bind uniquement sur localhost
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d trading_etf_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /run
      - /run/postgresql

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: trading_redis_prod
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"  # Bind uniquement sur localhost
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Backend API sécurisé
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: trading_backend_prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/trading_etf_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY}
      - FINANCIAL_MODELING_PREP_API_KEY=${FINANCIAL_MODELING_PREP_API_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_EMAIL=${VAPID_EMAIL}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - RATE_LIMIT_REQUESTS=50
      - RATE_LIMIT_WINDOW=60
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=WARNING
      - INIT_DB=true  # Uniquement au premier démarrage
    ports:
      - "127.0.0.1:8000:8000"  # Bind uniquement sur localhost
    volumes:
      - ./logs:/app/logs
      - backend_static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend_network
      - frontend_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs

  # Worker Celery pour les tâches asynchrones
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: trading_celery_worker_prod
    restart: unless-stopped
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=warning", "--concurrency=2"]
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/trading_etf_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY}
      - FINANCIAL_MODELING_PREP_API_KEY=${FINANCIAL_MODELING_PREP_API_KEY}
      - LOG_LEVEL=WARNING
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs

  # Scheduler Celery Beat
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: trading_celery_beat_prod
    restart: unless-stopped
    command: ["celery", "-A", "app.celery_app", "beat", "--loglevel=warning"]
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/trading_etf_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - LOG_LEVEL=WARNING
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs

  # Frontend sécurisé avec Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: trading_frontend_prod
    restart: unless-stopped
    ports:
      - "8080:8080"   # HTTP accessible depuis l'extérieur
    volumes:
      - ./frontend/ssl:/etc/nginx/ssl:ro  # Certificats SSL
      - ./logs/nginx:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - frontend_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

  # Reverse Proxy Nginx (optionnel pour load balancing) - COMMENTÉ POUR SIMPLICITÉ
  # nginx_proxy:
  #   image: nginx:1.24-alpine
  #   container_name: trading_nginx_proxy_prod
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #     - ./logs/nginx:/var/log/nginx
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - frontend_network
  #   security_opt:
  #     - no-new-privileges:true
  #   read_only: true
  #   tmpfs:
  #     - /tmp
  #     - /var/cache/nginx
  #     - /var/run

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring_network
    security_opt:
      - no-new-privileges:true

networks:
  backend_network:
    driver: bridge
    internal: true  # Réseau interne pour la sécurité
  frontend_network:
    driver: bridge
  monitoring_network:
    driver: bridge
    internal: true

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  backend_static:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local

# Configuration des limites de ressources et de sécurité
x-common-variables: &common-variables
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 512M
      reservations:
        cpus: '0.25'
        memory: 256M
  security_opt:
    - no-new-privileges:true
  tmpfs:
    - /tmp