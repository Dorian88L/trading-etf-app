"""
Endpoints pour les signaux avanc√©s de trading ETF
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import logging

from app.core.database import get_db
from app.api.deps import get_current_active_user
from app.models.user import User
from app.models.signal import Signal, SignalType
from app.services.signal_generator import get_signal_generator_service, TradingSignal
from app.services.technical_indicators import get_technical_analysis_service
from app.services.etf_catalog import get_etf_catalog_service

router = APIRouter()
logger = logging.getLogger(__name__)

@router.get(
    "/signals/advanced", 
    tags=["signals"],
    summary="Signaux de trading avanc√©s",
    description="""
    R√©cup√®re les signaux de trading avanc√©s bas√©s sur l'analyse technique multi-algorithmes.
    
    **Algorithmes utilis√©s :**
    - üìà **Breakout detection** : Cassures de niveaux cl√©s avec volume
    - üîÑ **Mean reversion** : Retour √† la moyenne avec RSI/Stochastic  
    - üöÄ **Momentum trading** : Suivi de tendance avec MACD/ROC
    - ‚öñÔ∏è **Multi-timeframe** : Confirmation sur plusieurs unit√©s de temps
    
    **Scores fournis :**
    - Score de confiance (0-100%)
    - Score technique (bas√© sur 15+ indicateurs)
    - Score de risque (volatilit√© + corr√©lations)
    - Force du signal (weak/moderate/strong/very_strong)
    
    **Filtres disponibles :**
    - Confiance minimum
    - Types de signaux (BUY/SELL/HOLD/WAIT)
    - Score de risque maximum
    - Secteurs/R√©gions sp√©cifiques
    """,
    response_description="Liste des signaux avec scores d√©taill√©s et justifications"
)
async def get_advanced_signals(
    min_confidence: float = Query(60.0, description="Confiance minimum (0-100)"),
    signal_types: Optional[str] = Query(None, description="Types de signaux (BUY,SELL,HOLD)"),
    max_risk_score: float = Query(80.0, description="Score de risque maximum (0-100)"),
    sectors: Optional[str] = Query(None, description="Secteurs s√©par√©s par virgule"),
    limit: int = Query(20, description="Nombre maximum de signaux"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    R√©cup√®re les signaux de trading avanc√©s avec analyse technique approfondie
    """
    try:
        logger.info(f"G√©n√©ration signaux avanc√©s pour utilisateur {current_user.id}")
        
        # R√©cup√©rer le service de g√©n√©ration de signaux
        signal_service = get_signal_generator_service()
        catalog_service = get_etf_catalog_service()
        
        # R√©cup√©rer les ETFs disponibles selon les filtres
        etfs = catalog_service.get_all_etfs()
        
        if sectors:
            sector_list = [s.strip() for s in sectors.split(',')]
            etfs = [etf for etf in etfs if etf.sector in sector_list]
        
        # G√©n√©rer des signaux pour les ETFs
        etf_data_list = []
        for etf in etfs[:50]:  # Limiter √† 50 ETFs pour √©viter les timeouts
            etf_data_list.append({
                'isin': etf.isin,
                'symbol': etf.symbol,
                'name': etf.name,
                'sector': etf.sector,
                'current_price': 100.0  # Prix d'exemple
            })
        
        # G√©n√©rer les signaux
        trading_signals = signal_service.generate_signals_for_etfs(etf_data_list)
        
        # Filtrer selon les crit√®res
        filtered_signals = []
        for signal in trading_signals:
            if signal.confidence < min_confidence:
                continue
                
            if signal.risk_score > max_risk_score:
                continue
            
            if signal_types:
                allowed_types = [t.strip().upper() for t in signal_types.split(',')]
                if signal.signal_type.value.upper() not in allowed_types:
                    continue
            
            # Convertir en format API
            signal_data = {
                'id': f"signal_{signal.symbol}_{int(datetime.now().timestamp())}",
                'etf_symbol': signal.symbol,
                'etf_name': 'ETF Name',  # √Ä r√©cup√©rer du catalogue
                'etf_isin': signal.etf_isin,
                'sector': 'Technology',  # √Ä r√©cup√©rer du catalogue
                'region': 'Europe',
                
                # Signal principal
                'signal_type': signal.signal_type.value,
                'strength': signal.strength.value,
                'confidence': round(signal.confidence, 1),
                
                # Prix et targets
                'current_price': signal.entry_price,
                'entry_price': signal.entry_price,
                'price_target': signal.price_target,
                'stop_loss': signal.stop_loss,
                
                # Scores techniques
                'technical_score': round(signal.technical_score, 1),
                'risk_score': round(signal.risk_score, 1),
                'trend_strength': 75.0,
                'volatility_score': 60.0,
                
                # Indicateurs cl√©s
                'indicators': {
                    'rsi': 65.0,
                    'macd': 0.15,
                    'macd_signal': 0.12,
                    'sma_20': signal.entry_price * 0.98,
                    'sma_50': signal.entry_price * 0.95,
                    'bollinger_position': 0.7
                },
                
                # Justifications
                'reasons': signal.reasons,
                'risk_factors': ['Volatilit√© √©lev√©e', 'Volume faible'],
                
                # Performance estim√©e
                'expected_return': 3.5,
                'max_drawdown': -2.0,
                'time_horizon': '1-4 weeks',
                
                # M√©tadonn√©es
                'generated_at': signal.timestamp.isoformat(),
                'data_source': ['Yahoo Finance', 'Alpha Vantage'],
                'algorithm_version': '2.1.0'
            }
            
            filtered_signals.append(signal_data)
        
        # Trier par confiance d√©croissante et limiter
        filtered_signals.sort(key=lambda x: x['confidence'], reverse=True)
        filtered_signals = filtered_signals[:limit]
        
        # Statistiques de g√©n√©ration
        generation_stats = {
            'etfs_processed': len(etf_data_list),
            'signals_generated': len(filtered_signals),
            'avg_confidence': round(sum(s['confidence'] for s in filtered_signals) / len(filtered_signals), 1) if filtered_signals else 0,
            'signal_distribution': {}
        }
        
        # Distribution des types de signaux
        for signal in filtered_signals:
            signal_type = signal['signal_type']
            generation_stats['signal_distribution'][signal_type] = generation_stats['signal_distribution'].get(signal_type, 0) + 1
        
        logger.info(f"G√©n√©ration termin√©e: {len(filtered_signals)} signaux")
        
        return {
            'status': 'success',
            'count': len(filtered_signals),
            'data': filtered_signals,
            'generation_stats': generation_stats,
            'filters_applied': {
                'min_confidence': min_confidence,
                'signal_types': signal_types,
                'max_risk_score': max_risk_score,
                'sectors': sectors
            },
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration signaux avanc√©s: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"Erreur lors de la g√©n√©ration des signaux avanc√©s: {str(e)}"
        )

@router.get(
    "/signals/watchlist",
    tags=["signals"],
    summary="Signaux pour les ETFs de la watchlist",
    description="G√©n√®re des signaux uniquement pour les ETFs de la watchlist utilisateur"
)
async def get_watchlist_signals(
    min_confidence: float = Query(50.0, description="Confiance minimum"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """G√©n√®re des signaux pour les ETFs de la watchlist utilisateur"""
    try:
        from app.models.user_preferences import UserWatchlist
        
        # R√©cup√©rer la watchlist de l'utilisateur
        watchlist = db.query(UserWatchlist).filter(
            UserWatchlist.user_id == current_user.id,
            UserWatchlist.is_active == True
        ).all()
        
        if not watchlist:
            return {
                'status': 'success',
                'count': 0,
                'data': [],
                'message': 'Aucun ETF dans votre watchlist'
            }
        
        signal_service = get_signal_generator_service()
        catalog_service = get_etf_catalog_service()
        
        signals = []
        for item in watchlist:
            etf_info = catalog_service.get_etf_by_isin(item.etf_isin)
            if etf_info:
                etf_data = {
                    'isin': etf_info.isin,
                    'symbol': etf_info.symbol,
                    'name': etf_info.name,
                    'sector': etf_info.sector,
                    'current_price': 100.0
                }
                
                # G√©n√©rer signal pour cet ETF
                trading_signals = signal_service.generate_signals_for_etfs([etf_data])
                
                for signal in trading_signals:
                    if signal.confidence >= min_confidence:
                        signals.append({
                            'etf_symbol': signal.symbol,
                            'etf_name': etf_info.name,
                            'signal_type': signal.signal_type.value,
                            'confidence': round(signal.confidence, 1),
                            'current_price': signal.entry_price,
                            'price_target': signal.price_target,
                            'stop_loss': signal.stop_loss,
                            'reasons': signal.reasons,
                            'watchlist_notes': item.notes,
                            'generated_at': signal.timestamp.isoformat()
                        })
        
        return {
            'status': 'success',
            'count': len(signals),
            'data': signals,
            'watchlist_size': len(watchlist)
        }
        
    except Exception as e:
        logger.error(f"Erreur signaux watchlist: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

@router.get(
    "/signals/statistics",
    tags=["signals"],
    summary="Statistiques globales des signaux"
)
async def get_signal_statistics(
    days_back: int = Query(30, description="P√©riode d'analyse en jours"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """R√©cup√®re les statistiques globales des signaux"""
    try:
        start_date = datetime.now() - timedelta(days=days_back)
        
        # Pour la d√©mo, g√©n√©rer des statistiques simul√©es
        # En production, r√©cup√©rer les vrais signaux de la DB
        
        statistics = {
            'period_analyzed': f'{days_back} days',
            'total_signals': 127,
            'average_confidence': 72.3,
            'average_risk_score': 45.8,
            
            'type_distribution': {
                'BUY': 45,
                'SELL': 32,
                'HOLD': 30,
                'WAIT': 20
            },
            
            'type_percentages': {
                'BUY': 35.4,
                'SELL': 25.2,
                'HOLD': 23.6,
                'WAIT': 15.8
            },
            
            'top_etfs_by_signals': [
                {'etf_symbol': 'IWDA.AS', 'signal_count': 12},
                {'etf_symbol': 'CSPX.AS', 'signal_count': 10},
                {'etf_symbol': 'VWCE.DE', 'signal_count': 8}
            ],
            
            'signals_per_day_avg': 4.2,
            
            'confidence_ranges': {
                'high_confidence_90_plus': 15,
                'medium_confidence_70_90': 67,
                'low_confidence_below_70': 45
            }
        }
        
        return {
            'status': 'success',
            'statistics': statistics,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Erreur statistiques signaux: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")