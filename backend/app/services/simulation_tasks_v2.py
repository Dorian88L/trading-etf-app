"""
T√¢ches Celery pour les simulations de trading automatique - Version corrig√©e
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from sqlalchemy.orm import Session
from celery import current_task
import logging
import time

from app.celery_app import celery_app
from app.core.database import SessionLocal
from app.models.trading_simulation import TradingSimulation, SimulationStatus
from app.services.trading_simulation_service_v2 import TradingSimulationService

logger = logging.getLogger(__name__)


def get_db_session():
    """Get database session for Celery tasks"""
    return SessionLocal()


@celery_app.task(bind=True, name="start_trading_simulation", autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 60})
def start_trading_simulation_task(self, simulation_id: int):
    """
    T√¢che Celery pour d√©marrer et g√©rer une simulation de trading.
    Cette t√¢che boucle jusqu'√† ce que la simulation soit termin√©e.
    """
    task_id = self.request.id
    logger.info(f"üöÄ D√©marrage de la simulation {simulation_id} avec t√¢che Celery {task_id}")
    
    db = get_db_session()
    simulation_service = TradingSimulationService()
    
    try:
        # V√©rifier que la simulation existe et est d√©marrable
        simulation = db.query(TradingSimulation).filter(
            TradingSimulation.id == simulation_id
        ).first()
        
        if not simulation:
            raise ValueError(f"Simulation {simulation_id} non trouv√©e")
        
        if simulation.status != SimulationStatus.PENDING:
            raise ValueError(f"Simulation {simulation_id} ne peut pas √™tre d√©marr√©e depuis l'√©tat {simulation.status}")
        
        # Mettre √† jour le statut initial
        simulation.status = SimulationStatus.RUNNING
        simulation.started_at = datetime.utcnow()
        simulation.celery_task_id = task_id
        simulation.last_heartbeat = datetime.utcnow()
        db.commit()
        
        logger.info(f"‚úÖ Simulation {simulation_id} initialis√©e, d√©but de la boucle de trading")
        
        # Boucle principale de trading
        iteration_count = 0
        max_iterations = 24 * 60 * 7  # Maximum 7 jours d'ex√©cution (1 iteration = 1 minute)
        
        while iteration_count < max_iterations:
            try:
                # Recharger la simulation pour v√©rifier son √©tat
                db.refresh(simulation)
                
                # V√©rifier si la simulation doit continuer
                if simulation.status != SimulationStatus.RUNNING:
                    logger.info(f"Simulation {simulation_id} arr√™t√©e (statut: {simulation.status})")
                    break
                
                # Mettre √† jour le heartbeat
                simulation.last_heartbeat = datetime.utcnow()
                
                # V√©rifier s'il faut effectuer un r√©√©quilibrage
                should_rebalance = (
                    simulation.last_rebalance_at is None or 
                    datetime.utcnow() >= (simulation.last_rebalance_at + timedelta(hours=simulation.rebalance_frequency_hours))
                )
                
                if should_rebalance:
                    logger.info(f"‚öñÔ∏è R√©√©quilibrage de la simulation {simulation_id}")
                    
                    # Ex√©cuter le r√©√©quilibrage via le service
                    trades = await simulation_service.execute_rebalance(simulation_id, db)
                    
                    logger.info(f"‚úÖ R√©√©quilibrage termin√©: {len(trades)} trades ex√©cut√©s")
                    
                    # Recharger la simulation apr√®s le r√©√©quilibrage
                    db.refresh(simulation)
                
                # Sauvegarder l'√©tat
                db.commit()
                
                # Attendre avant la prochaine it√©ration (1 minute)
                time.sleep(60)
                iteration_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de simulation {simulation_id}: {str(e)}")
                
                # Incr√©menter le compteur d'erreurs
                simulation.error_count = (simulation.error_count or 0) + 1
                simulation.error_message = str(e)
                
                # Si trop d'erreurs cons√©cutives, arr√™ter la simulation
                if simulation.error_count >= 5:
                    logger.error(f"Trop d'erreurs pour la simulation {simulation_id}, arr√™t")
                    simulation.status = SimulationStatus.FAILED
                    simulation.ended_at = datetime.utcnow()
                    db.commit()
                    break
                
                db.commit()
                
                # Attendre plus longtemps en cas d'erreur
                time.sleep(300)  # 5 minutes
        
        # V√©rifier le statut final
        if simulation.status == SimulationStatus.RUNNING:
            # Si la simulation est toujours en cours, elle a atteint sa limite d'it√©rations
            logger.info(f"Simulation {simulation_id} termin√©e (limite d'it√©rations atteinte)")
            await simulation_service.stop_simulation(simulation_id, db)
        
        logger.info(f"üèÅ T√¢che Celery termin√©e pour la simulation {simulation_id}")
        return {"simulation_id": simulation_id, "status": simulation.status.value, "total_trades": simulation.total_trades}
        
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale dans la t√¢che simulation {simulation_id}: {str(e)}")
        
        # Marquer la simulation comme √©chou√©e
        if 'simulation' in locals() and simulation:
            simulation.status = SimulationStatus.FAILED
            simulation.ended_at = datetime.utcnow()
            simulation.error_message = str(e)
            db.commit()
        
        raise
        
    finally:
        db.close()


@celery_app.task(bind=True, name="pause_trading_simulation")
def pause_trading_simulation_task(self, simulation_id: int):
    """
    T√¢che Celery pour mettre en pause une simulation.
    """
    logger.info(f"‚è∏Ô∏è Mise en pause de la simulation {simulation_id}")
    
    db = get_db_session()
    
    try:
        simulation = db.query(TradingSimulation).filter(
            TradingSimulation.id == simulation_id
        ).first()
        
        if not simulation:
            raise ValueError(f"Simulation {simulation_id} non trouv√©e")
        
        if simulation.status != SimulationStatus.RUNNING:
            logger.warning(f"Simulation {simulation_id} n'est pas en cours d'ex√©cution (statut: {simulation.status})")
            return {"simulation_id": simulation_id, "status": "already_paused"}
        
        # Mettre en pause
        simulation.status = SimulationStatus.PAUSED
        simulation.paused_at = datetime.utcnow()
        db.commit()
        
        logger.info(f"‚úÖ Simulation {simulation_id} mise en pause")
        return {"simulation_id": simulation_id, "status": "paused"}
        
    except Exception as e:
        logger.error(f"‚ùå Erreur pause simulation {simulation_id}: {str(e)}")
        raise
        
    finally:
        db.close()


@celery_app.task(bind=True, name="stop_trading_simulation")
def stop_trading_simulation_task(self, simulation_id: int):
    """
    T√¢che Celery pour arr√™ter d√©finitivement une simulation.
    """
    logger.info(f"üõë Arr√™t de la simulation {simulation_id}")
    
    db = get_db_session()
    simulation_service = TradingSimulationService()
    
    try:
        # Arr√™ter la simulation via le service
        await simulation_service.stop_simulation(simulation_id, db)
        
        logger.info(f"‚úÖ Simulation {simulation_id} arr√™t√©e")
        return {"simulation_id": simulation_id, "status": "stopped"}
        
    except Exception as e:
        logger.error(f"‚ùå Erreur arr√™t simulation {simulation_id}: {str(e)}")
        raise
        
    finally:
        db.close()


@celery_app.task(bind=True, name="cleanup_stale_simulations")
def cleanup_stale_simulations_task(self):
    """
    T√¢che de nettoyage pour identifier et nettoyer les simulations abandonn√©es.
    """
    logger.info("üßπ Nettoyage des simulations abandonn√©es")
    
    db = get_db_session()
    
    try:
        # Trouver les simulations qui n'ont pas de heartbeat depuis plus de 10 minutes
        stale_time = datetime.utcnow() - timedelta(minutes=10)
        
        stale_simulations = db.query(TradingSimulation).filter(
            TradingSimulation.status == SimulationStatus.RUNNING,
            TradingSimulation.last_heartbeat < stale_time
        ).all()
        
        cleaned_count = 0
        
        for simulation in stale_simulations:
            logger.warning(f"Simulation abandonn√©e d√©tect√©e: {simulation.id}")
            
            # Marquer comme √©chou√©e
            simulation.status = SimulationStatus.FAILED
            simulation.ended_at = datetime.utcnow()
            simulation.error_message = "Simulation abandonn√©e (pas de heartbeat)"
            
            cleaned_count += 1
        
        if cleaned_count > 0:
            db.commit()
            logger.info(f"‚úÖ {cleaned_count} simulations abandonn√©es nettoy√©es")
        else:
            logger.info("‚úÖ Aucune simulation abandonn√©e trouv√©e")
        
        return {"cleaned_simulations": cleaned_count}
        
    except Exception as e:
        logger.error(f"‚ùå Erreur nettoyage simulations: {str(e)}")
        raise
        
    finally:
        db.close()


@celery_app.task(bind=True, name="health_check_simulations")
def health_check_simulations_task(self):
    """
    T√¢che de v√©rification de sant√© pour monitorer les simulations actives.
    """
    logger.info("üîç V√©rification de sant√© des simulations")
    
    db = get_db_session()
    
    try:
        # Compter les simulations par statut
        running_count = db.query(TradingSimulation).filter(
            TradingSimulation.status == SimulationStatus.RUNNING
        ).count()
        
        paused_count = db.query(TradingSimulation).filter(
            TradingSimulation.status == SimulationStatus.PAUSED
        ).count()
        
        completed_count = db.query(TradingSimulation).filter(
            TradingSimulation.status == SimulationStatus.COMPLETED
        ).count()
        
        failed_count = db.query(TradingSimulation).filter(
            TradingSimulation.status == SimulationStatus.FAILED
        ).count()
        
        logger.info(f"üìä Statut simulations - Running: {running_count}, Paused: {paused_count}, Completed: {completed_count}, Failed: {failed_count}")
        
        return {
            "running": running_count,
            "paused": paused_count,
            "completed": completed_count,
            "failed": failed_count
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur health check: {str(e)}")
        raise
        
    finally:
        db.close()


# Configuration des t√¢ches p√©riodiques
@celery_app.on_after_configure.connect
def setup_periodic_tasks(sender, **kwargs):
    """
    Configuration des t√¢ches p√©riodiques.
    """
    # Nettoyage des simulations abandonn√©es toutes les 5 minutes
    sender.add_periodic_task(
        300.0,  # 5 minutes
        cleanup_stale_simulations_task.s(),
        name='cleanup_stale_simulations'
    )
    
    # Health check toutes les 2 minutes
    sender.add_periodic_task(
        120.0,  # 2 minutes
        health_check_simulations_task.s(),
        name='health_check_simulations'
    )