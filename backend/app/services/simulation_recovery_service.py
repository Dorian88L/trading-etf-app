"""
Service de r√©cup√©ration automatique des simulations de trading
Red√©marre les simulations actives au d√©marrage du serveur
"""

import logging
from typing import List
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

from app.core.database import SessionLocal
from app.models.trading_simulation import TradingSimulation, SimulationStatus
from app.services.simulation_tasks import start_trading_simulation_task, cleanup_old_simulations_task

logger = logging.getLogger(__name__)

class SimulationRecoveryService:
    """Service pour r√©cup√©rer et red√©marrer les simulations actives"""
    
    def __init__(self):
        self.db = SessionLocal()
    
    def recover_active_simulations(self):
        """
        R√©cup√®re et red√©marre toutes les simulations qui √©taient actives
        """
        logger.info("üîÑ D√©marrage de la r√©cup√©ration des simulations actives...")
        
        try:
            # Trouver toutes les simulations qui √©taient en cours
            active_simulations = self.db.query(TradingSimulation)\
                .filter(TradingSimulation.status.in_([SimulationStatus.RUNNING, SimulationStatus.PENDING]))\
                .all()
            
            recovered_count = 0
            expired_count = 0
            error_count = 0
            
            for simulation in active_simulations:
                try:
                    # V√©rifier si la simulation a expir√©
                    if self._is_simulation_expired(simulation):
                        logger.info(f"‚è∞ Simulation {simulation.id} expir√©e - marquage comme termin√©e")
                        simulation.status = SimulationStatus.COMPLETED
                        simulation.completed_at = datetime.utcnow()
                        expired_count += 1
                        continue
                    
                    # V√©rifier si la simulation est r√©cup√©rable
                    if self._is_simulation_recoverable(simulation):
                        logger.info(f"üöÄ Red√©marrage de la simulation {simulation.id}")
                        
                        # Relancer la t√¢che Celery
                        task = start_trading_simulation_task.delay(str(simulation.id))
                        
                        # Mettre √† jour l'ID de t√¢che
                        simulation.celery_task_id = task.id
                        simulation.status = SimulationStatus.RUNNING
                        simulation.last_heartbeat = datetime.utcnow()
                        
                        recovered_count += 1
                        
                        logger.info(f"‚úÖ Simulation {simulation.id} red√©marr√©e avec t√¢che {task.id}")
                    else:
                        # Marquer comme erreur si non r√©cup√©rable
                        logger.warning(f"‚ö†Ô∏è Simulation {simulation.id} non r√©cup√©rable - marquage en erreur")
                        simulation.status = SimulationStatus.ERROR
                        simulation.error_message = "Simulation non r√©cup√©rable au red√©marrage"
                        error_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå Erreur r√©cup√©ration simulation {simulation.id}: {e}")
                    simulation.status = SimulationStatus.ERROR
                    simulation.error_message = f"Erreur de r√©cup√©ration: {str(e)}"
                    error_count += 1
            
            # Sauvegarder les changements
            self.db.commit()
            
            logger.info(f"üìä R√©cup√©ration termin√©e:")
            logger.info(f"   - Simulations red√©marr√©es: {recovered_count}")
            logger.info(f"   - Simulations expir√©es: {expired_count}")
            logger.info(f"   - Simulations en erreur: {error_count}")
            
            # Lancer le nettoyage des anciennes simulations
            cleanup_old_simulations_task.delay()
            
            return {
                "recovered": recovered_count,
                "expired": expired_count,
                "errors": error_count,
                "total_processed": len(active_simulations)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur fatale lors de la r√©cup√©ration: {e}")
            self.db.rollback()
            raise
        finally:
            self.db.close()
    
    def _is_simulation_expired(self, simulation: TradingSimulation) -> bool:
        """
        V√©rifie si une simulation a expir√©
        """
        if simulation.target_end_date and datetime.utcnow() > simulation.target_end_date:
            return True
        
        if simulation.days_remaining is not None and simulation.days_remaining <= 0:
            return True
        
        return False
    
    def _is_simulation_recoverable(self, simulation: TradingSimulation) -> bool:
        """
        V√©rifie si une simulation peut √™tre r√©cup√©r√©e
        """
        # V√©rifier si la simulation n'a pas √©t√© abandonn√©e depuis trop longtemps
        if simulation.last_heartbeat:
            time_since_heartbeat = datetime.utcnow() - simulation.last_heartbeat
            if time_since_heartbeat > timedelta(hours=6):  # Plus de 6h sans heartbeat
                logger.warning(f"Simulation {simulation.id}: derni√®re activit√© il y a {time_since_heartbeat}")
                return False
        
        # V√©rifier si la simulation a des erreurs r√©p√©t√©es
        if simulation.error_count >= 5:
            logger.warning(f"Simulation {simulation.id}: trop d'erreurs ({simulation.error_count})")
            return False
        
        # V√©rifier la coh√©rence des donn√©es
        if not simulation.etf_symbols or len(simulation.etf_symbols) == 0:
            logger.warning(f"Simulation {simulation.id}: pas d'ETF configur√©s")
            return False
        
        if simulation.initial_capital <= 0:
            logger.warning(f"Simulation {simulation.id}: capital initial invalide")
            return False
        
        return True
    
    def get_recovery_status(self) -> dict:
        """
        R√©cup√®re le statut de r√©cup√©ration des simulations
        """
        try:
            db = SessionLocal()
            
            # Compter les simulations par statut
            running_count = db.query(TradingSimulation)\
                .filter(TradingSimulation.status == SimulationStatus.RUNNING)\
                .count()
            
            paused_count = db.query(TradingSimulation)\
                .filter(TradingSimulation.status == SimulationStatus.PAUSED)\
                .count()
            
            completed_count = db.query(TradingSimulation)\
                .filter(TradingSimulation.status == SimulationStatus.COMPLETED)\
                .count()
            
            error_count = db.query(TradingSimulation)\
                .filter(TradingSimulation.status == SimulationStatus.ERROR)\
                .count()
            
            # V√©rifier les simulations sans heartbeat r√©cent
            stale_cutoff = datetime.utcnow() - timedelta(hours=2)
            stale_count = db.query(TradingSimulation)\
                .filter(
                    TradingSimulation.status == SimulationStatus.RUNNING,
                    TradingSimulation.last_heartbeat < stale_cutoff
                )\
                .count()
            
            db.close()
            
            return {
                "running": running_count,
                "paused": paused_count,
                "completed": completed_count,
                "error": error_count,
                "stale": stale_count,
                "total": running_count + paused_count + completed_count + error_count,
                "healthy_ratio": (running_count / (running_count + error_count + stale_count)) if (running_count + error_count + stale_count) > 0 else 1.0
            }
            
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration statut: {e}")
            return {"error": str(e)}
    
    def cleanup_abandoned_simulations(self):
        """
        Nettoie les simulations abandonn√©es
        """
        try:
            db = SessionLocal()
            
            # Simulatiions abandonn√©es = pas de heartbeat depuis plus de 4 heures
            cutoff_time = datetime.utcnow() - timedelta(hours=4)
            
            abandoned_simulations = db.query(TradingSimulation)\
                .filter(
                    TradingSimulation.status == SimulationStatus.RUNNING,
                    TradingSimulation.last_heartbeat < cutoff_time
                )\
                .all()
            
            cleaned_count = 0
            for simulation in abandoned_simulations:
                simulation.status = SimulationStatus.ERROR
                simulation.error_message = "Simulation abandonn√©e (pas d'activit√© r√©cente)"
                simulation.completed_at = datetime.utcnow()
                cleaned_count += 1
            
            db.commit()
            db.close()
            
            logger.info(f"üßπ Nettoy√© {cleaned_count} simulations abandonn√©es")
            return {"cleaned": cleaned_count}
            
        except Exception as e:
            logger.error(f"Erreur nettoyage simulations abandonn√©es: {e}")
            return {"error": str(e)}

# Service singleton
_recovery_service = None

def get_simulation_recovery_service() -> SimulationRecoveryService:
    """R√©cup√®re l'instance du service de r√©cup√©ration"""
    global _recovery_service
    if _recovery_service is None:
        _recovery_service = SimulationRecoveryService()
    return _recovery_service

def startup_recovery():
    """
    Fonction √† appeler au d√©marrage de l'application pour r√©cup√©rer les simulations
    """
    logger.info("üîÑ D√©marrage du processus de r√©cup√©ration des simulations...")
    
    try:
        recovery_service = get_simulation_recovery_service()
        result = recovery_service.recover_active_simulations()
        
        logger.info("‚úÖ R√©cup√©ration des simulations termin√©e avec succ√®s")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des simulations: {e}")
        return {"error": str(e)}

def schedule_periodic_cleanup():
    """
    Programme le nettoyage p√©riodique des simulations abandonn√©es
    """
    from app.celery_app import celery_app
    
    # Programmer le nettoyage toutes les heures
    celery_app.conf.beat_schedule.update({
        "cleanup-abandoned-simulations": {
            "task": "app.services.simulation_tasks.cleanup_old_simulations",
            "schedule": 3600.0,  # Toutes les heures
        }
    })
    
    logger.info("üìÖ Nettoyage p√©riodique programm√© toutes les heures")