#!/usr/bin/env python3
"""
Script pour g√©n√©rer les cl√©s VAPID n√©cessaires aux notifications push
"""

import os
import base64
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

def generate_vapid_keys():
    """G√©n√®re une paire de cl√©s VAPID (publique/priv√©e)"""
    
    # G√©n√©rer une cl√© priv√©e ECDSA
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    
    # Extraire la cl√© publique
    public_key = private_key.public_key()
    
    # S√©rialiser la cl√© priv√©e en format PEM
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # S√©rialiser la cl√© publique en format PEM
    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    
    # Convertir en base64 pour utilisation dans les variables d'environnement
    private_key_b64 = base64.b64encode(private_pem).decode('utf-8')
    public_key_b64 = base64.b64encode(public_pem).decode('utf-8')
    
    return private_key_b64, public_key_b64

def update_env_file(private_key, public_key):
    """Met √† jour le fichier .env avec les cl√©s VAPID"""
    
    env_path = '.env'
    
    # Lire le fichier .env existant
    env_lines = []
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            env_lines = f.readlines()
    
    # Supprimer les anciennes cl√©s VAPID s'elles existent
    env_lines = [line for line in env_lines if not line.startswith('VAPID_')]
    
    # Ajouter les nouvelles cl√©s
    env_lines.append(f'\n# Push Notifications VAPID Keys\n')
    env_lines.append(f'VAPID_PRIVATE_KEY={private_key}\n')
    env_lines.append(f'VAPID_PUBLIC_KEY={public_key}\n')
    env_lines.append(f'VAPID_EMAIL=admin@trading-etf.com\n')
    
    # √âcrire le fichier .env mis √† jour
    with open(env_path, 'w') as f:
        f.writelines(env_lines)
    
    print(f"‚úÖ Fichier .env mis √† jour avec les cl√©s VAPID")

def update_frontend_config(public_key):
    """Met √† jour la configuration frontend avec la cl√© publique"""
    
    frontend_env_path = '../frontend/.env'
    
    # Cr√©er le fichier .env frontend s'il n'existe pas
    env_lines = []
    if os.path.exists(frontend_env_path):
        with open(frontend_env_path, 'r') as f:
            env_lines = f.readlines()
    
    # Supprimer l'ancienne cl√© publique VAPID si elle existe
    env_lines = [line for line in env_lines if not line.startswith('REACT_APP_VAPID_PUBLIC_KEY')]
    
    # Ajouter la nouvelle cl√© publique
    env_lines.append(f'\n# Push Notifications\n')
    env_lines.append(f'REACT_APP_VAPID_PUBLIC_KEY={public_key}\n')
    
    # √âcrire le fichier .env frontend
    os.makedirs('../frontend', exist_ok=True)
    with open(frontend_env_path, 'w') as f:
        f.writelines(env_lines)
    
    print(f"‚úÖ Fichier frontend/.env mis √† jour avec la cl√© publique VAPID")

def main():
    """Fonction principale"""
    print("üîë G√©n√©ration des cl√©s VAPID pour les notifications push...")
    
    try:
        # G√©n√©rer les cl√©s
        private_key, public_key = generate_vapid_keys()
        
        print("‚úÖ Cl√©s VAPID g√©n√©r√©es avec succ√®s")
        
        # Mettre √† jour les fichiers de configuration
        update_env_file(private_key, public_key)
        update_frontend_config(public_key)
        
        print("\nüìã Configuration termin√©e:")
        print(f"   ‚Ä¢ Cl√© priv√©e VAPID ajout√©e au backend (.env)")
        print(f"   ‚Ä¢ Cl√© publique VAPID ajout√©e au frontend (frontend/.env)")
        print(f"   ‚Ä¢ Email VAPID configur√©: admin@trading-etf.com")
        
        print("\nüöÄ Les notifications push sont maintenant configur√©es!")
        print("   Red√©marrez l'application pour appliquer les changements.")
        
        # Afficher les cl√©s pour debug (attention en production)
        print(f"\nüîç Debug - Cl√© publique (√† garder secr√®te):")
        print(f"   {public_key[:50]}...")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des cl√©s: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())