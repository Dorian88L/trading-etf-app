#!/usr/bin/env python3
"""
Cr√©er un portfolio par d√©faut pour l'utilisateur admin
"""
import sys
sys.path.append('/app')
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.core.config import settings
from datetime import datetime

def create_default_portfolio():
    """Cr√©er un portfolio par d√©faut"""
    try:
        engine = create_engine(settings.DATABASE_URL)
        Session = sessionmaker(bind=engine)
        session = Session()
        
        print("üìù Cr√©ation du portfolio par d√©faut...")
        
        # R√©cup√©rer l'utilisateur admin
        result = session.execute(text("""
            SELECT id FROM users WHERE email = 'admin@investeclaire.fr' LIMIT 1
        """))
        
        user_row = result.fetchone()
        if not user_row:
            print("‚ùå Utilisateur admin non trouv√©")
            return False
            
        user_id = user_row[0]
        print(f"üë§ Utilisateur admin trouv√©: {user_id}")
        
        # V√©rifier si le portfolio existe d√©j√†
        existing = session.execute(text("""
            SELECT COUNT(*) FROM portfolios WHERE user_id = :user_id
        """), {"user_id": user_id}).fetchone()[0]
        
        if existing == 0:
            # Cr√©er un portfolio par d√©faut
            session.execute(text("""
                INSERT INTO portfolios (id, user_id, name, created_at, updated_at)
                VALUES (gen_random_uuid(), :user_id, 'Portfolio Principal', NOW(), NOW())
            """), {"user_id": user_id})
            print("‚úÖ Portfolio cr√©√©")
        else:
            print("‚ÑπÔ∏è Portfolio d√©j√† existant")
        
        # V√©rifier la table portfolios existe
        session.execute(text("SELECT COUNT(*) FROM portfolios"))
        
        session.commit()
        print("‚úÖ Portfolio par d√©faut cr√©√© avec succ√®s")
        
        # V√©rifier les portfolios
        result = session.execute(text("""
            SELECT p.name, u.email 
            FROM portfolios p 
            JOIN users u ON p.user_id = u.id
        """))
        
        portfolios = result.fetchall()
        print(f"\nüìä Portfolios existants: {len(portfolios)}")
        for portfolio in portfolios:
            print(f"  - {portfolio[0]} (Utilisateur: {portfolio[1]})")
        
        session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du portfolio: {e}")
        return False

if __name__ == "__main__":
    success = create_default_portfolio()
    if success:
        print("üéâ Portfolio par d√©faut cr√©√© avec succ√®s")
    else:
        print("üí• √âchec de la cr√©ation du portfolio")
        sys.exit(1)