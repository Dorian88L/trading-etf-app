# Version simplifiée du docker-compose de production pour test local
services:
  # Base de données PostgreSQL
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_postgres_prod_test
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_etf_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d trading_etf_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app_network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: trading_redis_prod_test
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.simple
    container_name: trading_backend_prod_test
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/trading_etf_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY}
      - FINANCIAL_MODELING_PREP_API_KEY=${FINANCIAL_MODELING_PREP_API_KEY}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS}
      - LOG_LEVEL=${LOG_LEVEL}
      - INIT_DB=true
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_test_data:
  redis_test_data: