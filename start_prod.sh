#!/bin/bash

# Script pour d√©marrer l'application en mode production
# ATTENTION: Ce script n√©cessite des privil√®ges sudo pour les ports 80 et 443

echo "üöÄ D√©marrage de l'application Trading ETF (PRODUCTION)"
echo "===================================================="

# V√©rifier les privil√®ges sudo
echo "üîê V√©rification des privil√®ges sudo..."
if ! sudo -n true 2>/dev/null; then
    echo "‚ö†Ô∏è Ce script n√©cessite des privil√®ges sudo pour utiliser les ports 80 et 443"
    echo "Veuillez saisir votre mot de passe sudo si demand√©"
    sudo -v || exit 1
fi

# Cr√©er dossier logs
mkdir -p logs
mkdir -p backend/logs

# Charger les variables d'environnement depuis .env.prod
if [ -f .env.prod ]; then
    echo "üìÅ Chargement des variables d'environnement depuis .env.prod"
    export $(grep -v '^#' .env.prod | xargs)
else
    echo "‚ùå Fichier .env.prod non trouv√©! Arr√™t du script."
    exit 1
fi

# V√©rifier PostgreSQL local
echo "üóÑÔ∏è V√©rification de PostgreSQL..."
if systemctl is-active --quiet postgresql; then
    echo "‚úÖ PostgreSQL actif"
else
    echo "‚ö†Ô∏è PostgreSQL non actif, tentative de d√©marrage..."
    sudo systemctl start postgresql || echo "‚ùå √âchec d√©marrage PostgreSQL"
fi

# V√©rifier Redis local
echo "üì¶ V√©rification de Redis..."
if systemctl is-active --quiet redis-server; then
    echo "‚úÖ Redis actif"
else
    echo "‚ö†Ô∏è Redis non actif, tentative de d√©marrage..."
    sudo systemctl start redis-server || echo "‚ùå √âchec d√©marrage Redis"
fi

# D√©marrer le backend sur port 8443
echo "üñ•Ô∏è D√©marrage du backend FastAPI (PRODUCTION)..."
cd backend
source venv/bin/activate 2>/dev/null || echo "‚ö†Ô∏è Environnement virtuel non trouv√©"
nohup uvicorn app.main_production:app --host 0.0.0.0 --port 8443 > logs/backend.log 2>&1 &
BACKEND_PID=$!
echo $BACKEND_PID > logs/backend.pid
cd ..

# Attendre que le backend soit pr√™t
echo "‚è≥ Attente du backend (30s max)..."
for i in {1..30}; do
    if curl -s http://localhost:8443/health >/dev/null 2>&1; then
        echo "‚úÖ Backend pr√™t sur http://localhost:8443"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Timeout backend"
        exit 1
    fi
    sleep 1
done

# Build du frontend React pour la production
echo "üî® Build du frontend React pour la production..."
cd frontend
npm run build
if [ $? -ne 0 ]; then
    echo "‚ùå √âchec du build frontend"
    exit 1
fi
echo "‚úÖ Build frontend termin√©"
cd ..

# D√©marrer nginx avec SSL
echo "üåê D√©marrage de nginx avec SSL (PRODUCTION)..."

# Arr√™ter nginx syst√®me s'il tourne
sudo systemctl stop nginx 2>/dev/null || true
sudo pkill -f nginx 2>/dev/null || true
sleep 2

# Supprimer les configs de dev et activer la config SSL
sudo rm -f /etc/nginx/sites-enabled/frontend-http
sudo rm -f /etc/nginx/sites-enabled/api-8443
sudo ln -sf /etc/nginx/sites-available/ssl-config /etc/nginx/sites-enabled/ssl-config

# Tester et d√©marrer nginx syst√®me avec config SSL
sudo nginx -t
if [ $? -eq 0 ]; then
    sudo systemctl start nginx
    echo "‚úÖ Nginx d√©marr√© avec configuration SSL syst√®me"
else
    echo "‚ùå √âchec test configuration nginx"
    exit 1
fi

echo ""
# Obtenir l'IP publique
PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo "IP_PUBLIQUE_NON_DETECTEE")

echo "üéâ Application d√©marr√©e en PRODUCTION!"
echo "====================================="
echo "Acc√®s externe (depuis Internet):"
echo "  Frontend: https://investeclaire.fr"
echo "  Backend:  https://api.investeclaire.fr"
echo ""
echo "Acc√®s local (pour debug):"
echo "  Frontend: https://localhost (si certificat valide)"
echo "  Backend:  http://localhost:8443"
echo ""
echo "‚ö†Ô∏è  IMPORTANT: Assurez-vous que les ports 80, 443 et 8443 sont ouverts dans votre firewall"
echo "    - sudo ufw allow 80"
echo "    - sudo ufw allow 443" 
echo "    - sudo ufw allow 8443"
echo ""
echo "PIDs sauvegard√©s dans logs/"
echo "Logs disponibles dans logs/"
echo ""
echo "Pour arr√™ter: ./stop_dev_no_docker.sh"