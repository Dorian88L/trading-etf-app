version: '3.8'

services:
  # Traefik - Reverse Proxy et Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - --api.insecure=true  # Interface web accessible
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=contact@investeclaire.fr
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Interface web Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/letsencrypt:/letsencrypt
    networks:
      - trading-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: trading_etf_dev
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_etf_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - ./data/redis:/data
    networks:
      - trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_etf_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    env_file:
      - .env.dev
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # Router pour les APIs
      - "traefik.http.routers.backend-api.rule=(Host(`localhost`) || Host(`api.investeclaire.fr`) || Host(`investeclaire.fr`)) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api.entrypoints=web"
      - "traefik.http.routers.backend-api.service=backend"
      # Router pour la documentation
      - "traefik.http.routers.backend-docs.rule=(Host(`localhost`) || Host(`api.investeclaire.fr`)) && (PathPrefix(`/docs`) || PathPrefix(`/redoc`) || PathPrefix(`/openapi.json`))"
      - "traefik.http.routers.backend-docs.entrypoints=web"
      - "traefik.http.routers.backend-docs.service=backend"
      # Service backend
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery-worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_etf_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    env_file:
      - .env.dev
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery-beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_etf_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    env_file:
      - .env.dev
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    networks:
      - trading-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    environment:
      - REACT_APP_API_URL=http://localhost
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - trading-network
    depends_on:
      - backend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`) || Host(`investeclaire.fr`) || Host(`www.investeclaire.fr`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

networks:
  trading-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: